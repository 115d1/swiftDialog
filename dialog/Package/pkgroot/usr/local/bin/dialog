#!/bin/sh
currentUser=$(echo "show State:/Users/ConsoleUser" | scutil | awk '/Name :/ { print $3 }')
uid=$(id -u "$currentUser")
dialogpath="/Library/Application Support/Dialog/Dialog.app"
dialogbin="$dialogpath/Contents/MacOS/Dialog"
commandfile=$(echo "$@" | awk -v pattern="--commandfile" '{for (i=0;i<=NF;i++) {if ($i==pattern) print $(i+1) }}')

echoerr() { echo "$@" 1>&2; }

if [[ -z $commandfile ]]; then
    commandfile="/var/tmp/dialog.log"
fi

# convenience function to run a command as the current user
# usage:
#   runAsUser command arguments...
# from https://scriptingosx.com/2020/08/running-a-command-as-another-user/
runAsUser() {
  if [ "$currentUser" != "loginwindow" ]; then
    launchctl asuser "$uid" sudo -H -u "$currentUser" "$@"
  else
    args=("$@")
    item="--loginwindow"
    if [[ ! " ${args[*]} " =~ " $item " ]]; then
        echoerr "no user logged in"
    else
        "$dialogbin" "$@"
    fi
  fi
}

# Check to make sure we have a binary to run
if [ ! -e "$dialogbin" ]; then
    echoerr "ERROR: Cannot find swiftDialog binary at $dialogbin"
    exit 255
fi

# If we're running as root, launch swiftDialog as the user.
if [ $(id -u) -eq 0 ]; then
    if [ -e $commandfile ]; then
        # Remove the command file if it exists
        # Addresses issues with local privilege escalation via insecure file system operations
        # (the dialog app will create this file if it doesn't exist)
        rm $commandfile
    fi
    runAsUser "$dialogbin" "$@"
else
    # check to see if the command file exists is readable by the user
    if [[ -e "$commandfile" ]] && [[ ! -r "$commandfile" ]]; then
        echoerr ""
        echoerr "Warning: command file ${commandfile} is not readable by user $currentUser"
        echoerr ""
        exit 255
    fi
    "$dialogbin" "$@"
fi
